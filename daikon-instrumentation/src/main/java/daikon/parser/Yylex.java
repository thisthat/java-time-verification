/* The following code was generated by JFlex 1.6.1 */

package daikon.parser;

import java.nio.file.Path;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/Users/giovanni/repository/java-xal/daikon-instrumentation/grammar/calc.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\61\1\1\1\7\1\7\1\2\22\0\1\50\1\34\1\3"+
    "\1\0\1\5\1\27\2\0\1\14\1\20\1\0\1\27\1\31\1\30"+
    "\1\5\1\0\12\12\1\21\1\0\1\32\1\26\1\33\2\0\1\41"+
    "\1\44\1\37\1\4\1\22\3\4\1\24\1\45\1\4\1\40\1\4"+
    "\1\35\1\43\2\4\1\36\1\42\1\25\3\4\1\23\2\4\1\10"+
    "\1\6\1\11\6\4\1\17\1\47\1\51\1\60\1\4\1\55\2\4"+
    "\1\52\1\15\1\46\1\16\2\4\1\57\1\54\1\53\5\4\1\56"+
    "\1\27\1\0\1\27\7\0\1\7\32\0\1\13\u15df\0\1\13\u097f\0"+
    "\13\13\35\0\1\7\1\7\5\0\1\13\57\0\1\13\u0fa0\0\1\13"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\2\4\1\3\1\4"+
    "\1\3\2\1\1\5\1\6\1\7\1\1\1\3\1\10"+
    "\1\3\1\0\3\3\1\0\3\3\2\0\2\3\1\0"+
    "\1\11\1\12\1\13\1\14\2\3\1\0\1\3\1\0"+
    "\1\15\1\0\2\3\2\0\1\16\1\0\2\3\2\0"+
    "\1\17\4\0\1\20\1\3\1\21\7\0\1\3\1\0"+
    "\1\22\5\0\1\3\1\0\1\23\4\0\1\3\1\24"+
    "\1\25\1\26\2\0\1\27\1\30\102\0\1\31";

  private static int [] zzUnpackAction() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\62\0\144\0\226\0\310\0\372\0\310"+
    "\0\u012c\0\62\0\u015e\0\u0190\0\u01c2\0\62\0\u01f4\0\u0226"+
    "\0\u0258\0\u028a\0\u02bc\0\u02ee\0\u0320\0\62\0\u0352\0\u0384"+
    "\0\u03b6\0\u03b6\0\372\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0"+
    "\0\u04e2\0\u0514\0\u0546\0\62\0\62\0\u0578\0\u05aa\0\u05dc"+
    "\0\u0320\0\u060e\0\u03b6\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708"+
    "\0\62\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\310\0\u0834"+
    "\0\u0866\0\u0898\0\u08ca\0\62\0\u08fc\0\310\0\u092e\0\u0960"+
    "\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\62"+
    "\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e"+
    "\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\62\0\62\0\62"+
    "\0\u0d7a\0\u0dac\0\310\0\62\0\u0dde\0\u0e10\0\u0e42\0\u0e74"+
    "\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004"+
    "\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194"+
    "\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324"+
    "\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4"+
    "\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644"+
    "\0\u1676\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4"+
    "\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964"+
    "\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\62";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\6\1\2"+
    "\1\7\1\10\1\11\1\2\1\12\1\6\1\13\1\6"+
    "\1\12\1\14\4\6\1\15\1\12\1\10\1\16\1\17"+
    "\1\20\1\21\12\6\1\22\1\23\3\6\1\24\4\6"+
    "\1\23\63\0\1\3\60\0\3\25\1\26\1\27\1\25"+
    "\1\30\1\25\3\27\2\25\3\27\2\25\4\27\2\25"+
    "\1\27\4\25\13\27\1\25\10\27\1\25\3\0\1\26"+
    "\3\6\1\0\3\6\2\0\3\6\2\0\4\6\2\0"+
    "\1\6\4\0\13\6\1\0\10\6\1\0\3\31\1\32"+
    "\2\33\1\34\1\31\1\6\2\33\2\31\3\33\2\31"+
    "\4\33\2\31\1\33\4\31\13\33\1\31\10\33\1\31"+
    "\1\0\2\35\1\26\3\6\1\35\2\6\1\11\1\35"+
    "\1\36\3\6\2\0\4\6\2\0\1\6\4\0\13\6"+
    "\1\35\10\6\1\35\3\0\1\26\3\6\1\0\3\6"+
    "\2\0\3\6\2\0\4\6\2\0\1\6\4\0\11\6"+
    "\1\37\1\6\1\0\6\6\1\40\1\6\22\0\1\41"+
    "\66\0\1\42\61\0\1\43\61\0\1\44\61\0\1\45"+
    "\36\0\1\26\3\6\1\0\3\6\2\0\3\6\2\0"+
    "\4\6\2\0\1\6\4\0\13\6\1\0\1\6\1\46"+
    "\6\6\51\0\1\23\10\0\1\23\3\0\1\26\3\6"+
    "\1\0\3\6\2\0\3\6\2\0\4\6\2\0\1\6"+
    "\4\0\13\6\1\0\4\6\1\47\3\6\1\0\3\25"+
    "\1\26\2\25\1\50\56\25\1\26\2\27\1\30\1\25"+
    "\3\27\2\25\3\27\2\25\4\27\2\25\1\27\4\25"+
    "\13\27\1\25\10\27\2\25\2\0\1\51\3\27\1\0"+
    "\3\27\2\25\3\27\2\25\4\27\2\25\1\27\4\25"+
    "\13\27\1\25\10\27\1\25\6\31\1\52\1\31\1\0"+
    "\1\53\53\31\1\32\2\33\1\34\1\31\3\33\2\31"+
    "\3\33\2\31\4\33\2\31\1\33\4\31\13\33\1\31"+
    "\10\33\1\31\1\0\2\35\4\0\1\35\3\0\1\35"+
    "\1\36\33\0\1\35\10\0\1\35\15\0\1\54\47\0"+
    "\1\26\3\6\1\0\3\6\2\0\3\6\2\0\4\6"+
    "\2\0\1\6\4\0\12\6\1\55\1\0\10\6\4\0"+
    "\1\26\3\6\1\0\3\6\2\0\3\6\2\0\4\6"+
    "\2\0\1\6\4\0\13\6\1\0\4\6\1\56\3\6"+
    "\22\0\1\57\66\0\1\60\4\0\1\61\54\0\1\62"+
    "\36\0\1\26\3\6\1\0\3\6\2\0\3\6\2\0"+
    "\4\6\2\0\1\6\4\0\12\6\1\63\1\0\10\6"+
    "\4\0\1\26\3\6\1\0\3\6\2\0\3\6\2\0"+
    "\4\6\2\0\1\6\4\0\13\6\1\0\5\6\1\64"+
    "\2\6\1\0\1\25\2\0\4\25\1\0\52\25\6\31"+
    "\1\52\2\31\1\53\50\31\16\0\1\65\46\0\1\26"+
    "\3\6\1\0\3\6\2\0\3\6\2\0\4\6\2\0"+
    "\1\6\4\0\13\6\1\66\10\6\4\0\1\26\3\6"+
    "\1\0\3\6\2\0\3\6\2\0\4\6\2\0\1\6"+
    "\4\0\13\6\1\0\7\6\1\67\23\0\1\70\14\0"+
    "\1\71\3\0\1\72\44\0\1\73\66\0\1\74\31\0"+
    "\1\26\3\6\1\0\3\6\2\0\1\75\2\6\2\0"+
    "\4\6\2\0\1\6\4\0\13\6\1\0\10\6\4\0"+
    "\1\26\3\6\1\0\3\6\2\0\3\6\2\0\4\6"+
    "\2\0\1\6\4\0\12\6\1\76\1\0\10\6\20\0"+
    "\1\77\60\0\1\100\66\0\1\101\11\0\1\102\64\0"+
    "\1\103\65\0\1\104\43\0\1\105\36\0\1\26\3\6"+
    "\1\0\3\6\2\0\3\6\2\0\4\6\2\0\1\6"+
    "\4\0\12\6\1\106\1\0\10\6\2\0\2\107\4\0"+
    "\1\107\3\0\1\107\34\0\1\107\10\0\1\107\51\0"+
    "\1\110\34\0\1\111\62\0\1\112\75\0\1\113\65\0"+
    "\1\114\42\0\1\115\36\0\1\26\3\6\1\0\3\6"+
    "\2\0\3\6\2\0\4\6\2\0\1\6\4\0\11\6"+
    "\1\116\1\6\1\0\10\6\2\0\2\107\4\0\1\107"+
    "\2\0\1\117\1\107\34\0\1\107\10\0\1\107\25\0"+
    "\1\120\56\0\1\121\101\0\1\122\41\0\1\123\65\0"+
    "\1\124\36\0\1\26\3\6\1\0\3\6\2\0\3\6"+
    "\2\0\4\6\2\0\1\6\4\0\13\6\1\0\2\6"+
    "\1\125\5\6\13\0\1\117\5\0\1\126\53\0\1\120"+
    "\105\0\1\127\65\0\1\130\56\0\1\131\50\0\1\132"+
    "\36\0\1\26\3\6\1\0\3\6\2\0\3\6\2\0"+
    "\4\6\2\0\1\6\4\0\13\6\1\0\3\6\1\133"+
    "\4\6\26\0\1\134\62\0\1\135\61\0\1\136\61\0"+
    "\1\137\61\0\1\140\61\0\1\141\61\0\1\142\61\0"+
    "\1\143\61\0\1\144\61\0\1\145\61\0\1\146\61\0"+
    "\1\147\61\0\1\150\61\0\1\151\61\0\1\152\61\0"+
    "\1\153\61\0\1\154\61\0\1\155\61\0\1\156\61\0"+
    "\1\157\61\0\1\160\61\0\1\161\61\0\1\162\61\0"+
    "\1\163\61\0\1\164\61\0\1\165\61\0\1\166\61\0"+
    "\1\167\61\0\1\170\61\0\1\171\61\0\1\172\61\0"+
    "\1\173\61\0\1\174\61\0\1\175\61\0\1\176\61\0"+
    "\1\177\61\0\1\200\61\0\1\201\61\0\1\202\61\0"+
    "\1\203\61\0\1\204\61\0\1\205\61\0\1\206\61\0"+
    "\1\207\61\0\1\210\61\0\1\211\61\0\1\212\61\0"+
    "\1\213\61\0\1\214\61\0\1\215\61\0\1\216\61\0"+
    "\1\217\61\0\1\220\61\0\1\221\61\0\1\222\61\0"+
    "\1\223\61\0\1\224\61\0\1\225\61\0\1\226\61\0"+
    "\1\227\61\0\1\230\61\0\1\231\61\0\1\232\61\0"+
    "\1\233\61\0\1\234\61\0\1\235\61\0\1\236\61\0"+
    "\1\237\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6850];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\6\1\1\11\3\1\1\11\6\1\1\0"+
    "\1\11\2\1\1\0\3\1\2\0\2\1\1\0\2\1"+
    "\2\11\2\1\1\0\1\1\1\0\1\1\1\0\2\1"+
    "\2\0\1\11\1\0\2\1\2\0\1\1\4\0\1\11"+
    "\2\1\7\0\1\1\1\0\1\11\5\0\1\1\1\0"+
    "\1\1\4\0\1\1\3\11\2\0\1\1\1\11\102\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private Parser yyparser;

  public int line = 1;
  public boolean debug = true;
  public Path filename;

  public Yylex(java.io.Reader r, Parser yyparser) {
    this(r);
    this.yyparser = yyparser;
  }

  public String getBuffer(){
      return new String(this.zzBuffer, this.zzCurrentPos, this.zzEndRead-this.zzStartRead);
  }
  public String getBuffer(int lookaheadLines){
      if(lookaheadLines < 1)
        lookaheadLines = 1;
      int start = zzCurrentPos;
      while(lookaheadLines != 0){
        if(this.zzBuffer[start] == '\n')
          lookaheadLines--;
        start++;
        if(this.zzBuffer.length <= start)
          lookaheadLines = 0;
      }
      return new String(this.zzBuffer, this.zzCurrentPos, start-this.zzCurrentPos);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 214) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return 0; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("[" + this.filename.toFile().getPath() + "]\n[" + line + "] Error: unexpected character '"+yytext()+"'");
            }
          case 26: break;
          case 2: 
            { line++;
            }
          case 27: break;
          case 3: 
            { yyparser.yylval = new ParserVal(yytext());
        return Parser.TEXT;
            }
          case 28: break;
          case 4: 
            { return (int) yycharat(0);
            }
          case 29: break;
          case 5: 
            { return Parser.COMMA;
            }
          case 30: break;
          case 6: 
            { return Parser.L;
            }
          case 31: break;
          case 7: 
            { return Parser.G;
            }
          case 32: break;
          case 8: 
            { 
            }
          case 33: break;
          case 9: 
            { return Parser.EQUAL;
            }
          case 34: break;
          case 10: 
            { return Parser.LEQ;
            }
          case 35: break;
          case 11: 
            { return Parser.GEQ;
            }
          case 36: break;
          case 12: 
            { return Parser.NEQUAL;
            }
          case 37: break;
          case 13: 
            { yyparser.yylval = new ParserVal(yytext());
            return Parser.ARRAYVAL;
            }
          case 38: break;
          case 14: 
            { return Parser.IF;
            }
          case 39: break;
          case 15: 
            { return Parser.ORIG;
            }
          case 40: break;
          case 16: 
            { return Parser.IFF;
            }
          case 41: break;
          case 17: 
            { return Parser.SIZE;
            }
          case 42: break;
          case 18: 
            { return Parser.ONEOF;
            }
          case 43: break;
          case 19: 
            { yyparser.yylval = new ParserVal(yytext());return Parser.EXIT;
            }
          case 44: break;
          case 20: 
            { yyparser.yylval = new ParserVal(yytext());
        return Parser.MOD;
            }
          case 45: break;
          case 21: 
            { return Parser.ENTER;
            }
          case 46: break;
          case 22: 
            { return Parser.CLASS;
            }
          case 47: break;
          case 23: 
            { return Parser.ELEMS;
            }
          case 48: break;
          case 24: 
            { return Parser.OBJECT;
            }
          case 49: break;
          case 25: 
            { return Parser.SEP;
            }
          case 50: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
